Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import unittest

class TestRectangle(unittest.TestCase):
    def setUp(self):
        """TODO: Create shared test data before each test."""
        # TODO: define two attributes: self.length and self.width
        #       for example: self.length = 5, self.width = 3
        # TODO: compute the expected area and store it in self.area
        pass  # remove this line after completing setup

    def tearDown(self):
        """TODO: Optional cleanup after each test."""
        # TODO: reset attributes to None or print a message for debugging
        pass  # remove this line after completing teardown

    def test_area_positive(self):
        """TODO: Check that the computed area equals the expected one."""
        # TODO: compute the area using self.length and self.width
        # result = ...
        # TODO: use assertEqual to compare with self.area
        # self.assertEqual(..., ...)
        pass  # remove this line after completing the test

    def test_perimeter(self):
        """TODO: Check that perimeter calculation is correct."""
        # TODO: compute perimeter = 2 * (length + width)
        # perimeter = ...
        # TODO: use assertEqual to check the expected value (should be 16)
        # self.assertEqual(..., ...)
        pass  # remove this line after completing the test


# --- Run tests in Jupyter-friendly mode ---
suite = unittest.TestLoader().loadTestsFromTestCase(TestMeanExercises)
unittest.TextTestRunner(verbosity=2).run(suite)
------------------


[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 34[39m
[32m     30[39m         [38;5;28;01mpass[39;00m  [38;5;66;03m# remove this line after completing the test[39;00m
[32m     33[39m [38;5;66;03m# --- Run tests in Jupyter-friendly mode ---[39;00m
[32m---> [39m[32m34[39m suite = unittest.TestLoader().loadTestsFromTestCase([43mTestMeanExercises[49m)
[32m     35[39m unittest.TextTestRunner(verbosity=[32m2[39m).run(suite)

[31mNameError[39m: name 'TestMeanExercises' is not defined

