Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# --- Save: write both CSV and Parquet outputs ---
os.makedirs("data", exist_ok=True)

csv_path = "data/filtered_measurements.csv"
parquet_path = "data/filtered_measurements.parquet"

filtered.to_csv(csv_path, index=False)
filtered.to_parquet(parquet_path, index=False)

print("Saved files:")
print("-", csv_path)
print("-", parquet_path)

# Optional: read back to verify
reloaded = pd.read_parquet(parquet_path)
print("\nReloaded from Parquet:")
display(reloaded)

------------------


[31m---------------------------------------------------------------------------[39m
[31mImportError[39m                               Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[7][39m[32m, line 8[39m
[32m      5[39m parquet_path = [33m"[39m[33mdata/filtered_measurements.parquet[39m[33m"[39m
[32m      7[39m filtered.to_csv(csv_path, index=[38;5;28;01mFalse[39;00m)
[32m----> [39m[32m8[39m [43mfiltered[49m[43m.[49m[43mto_parquet[49m[43m([49m[43mparquet_path[49m[43m,[49m[43m [49m[43mindex[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[32m     10[39m [38;5;28mprint[39m([33m"[39m[33mSaved files:[39m[33m"[39m)
[32m     11[39m [38;5;28mprint[39m([33m"[39m[33m-[39m[33m"[39m, csv_path)

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/util/_decorators.py:333[39m, in [36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper[39m[34m(*args, **kwargs)[39m
[32m    327[39m [38;5;28;01mif[39;00m [38;5;28mlen[39m(args) > num_allow_args:
[32m    328[39m     warnings.warn(
[32m    329[39m         msg.format(arguments=_format_argument_list(allow_args)),
[32m    330[39m         [38;5;167;01mFutureWarning[39;00m,
[32m    331[39m         stacklevel=find_stack_level(),
[32m    332[39m     )
[32m--> [39m[32m333[39m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/core/frame.py:3118[39m, in [36mDataFrame.to_parquet[39m[34m(self, path, engine, compression, index, partition_cols, storage_options, **kwargs)[39m
[32m   3037[39m [38;5;250m[39m[33;03m"""[39;00m
[32m   3038[39m [33;03mWrite a DataFrame to the binary parquet format.[39;00m
[32m   3039[39m 
[32m   (...)[39m[32m   3114[39m [33;03m>>> content = f.read()[39;00m
[32m   3115[39m [33;03m"""[39;00m
[32m   3116[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mpandas[39;00m[34;01m.[39;00m[34;01mio[39;00m[34;01m.[39;00m[34;01mparquet[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m to_parquet
[32m-> [39m[32m3118[39m [38;5;28;01mreturn[39;00m [43mto_parquet[49m[43m([49m
[32m   3119[39m [43m    [49m[38;5;28;43mself[39;49m[43m,[49m
[32m   3120[39m [43m    [49m[43mpath[49m[43m,[49m
[32m   3121[39m [43m    [49m[43mengine[49m[43m,[49m
[32m   3122[39m [43m    [49m[43mcompression[49m[43m=[49m[43mcompression[49m[43m,[49m
[32m   3123[39m [43m    [49m[43mindex[49m[43m=[49m[43mindex[49m[43m,[49m
[32m   3124[39m [43m    [49m[43mpartition_cols[49m[43m=[49m[43mpartition_cols[49m[43m,[49m
[32m   3125[39m [43m    [49m[43mstorage_options[49m[43m=[49m[43mstorage_options[49m[43m,[49m
[32m   3126[39m [43m    [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m,[49m
[32m   3127[39m [43m[49m[43m)[49m

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/io/parquet.py:478[39m, in [36mto_parquet[39m[34m(df, path, engine, compression, index, storage_options, partition_cols, filesystem, **kwargs)[39m
[32m    476[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(partition_cols, [38;5;28mstr[39m):
[32m    477[39m     partition_cols = [partition_cols]
[32m--> [39m[32m478[39m impl = [43mget_engine[49m[43m([49m[43mengine[49m[43m)[49m
[32m    480[39m path_or_buf: FilePath | WriteBuffer[[38;5;28mbytes[39m] = io.BytesIO() [38;5;28;01mif[39;00m path [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m path
[32m    482[39m impl.write(
[32m    483[39m     df,
[32m    484[39m     path_or_buf,
[32m   (...)[39m[32m    490[39m     **kwargs,
[32m    491[39m )

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/io/parquet.py:68[39m, in [36mget_engine[39m[34m(engine)[39m
[32m     65[39m         [38;5;28;01mexcept[39;00m [38;5;167;01mImportError[39;00m [38;5;28;01mas[39;00m err:
[32m     66[39m             error_msgs += [33m"[39m[38;5;130;01m\n[39;00m[33m - [39m[33m"[39m + [38;5;28mstr[39m(err)
[32m---> [39m[32m68[39m     [38;5;28;01mraise[39;00m [38;5;167;01mImportError[39;00m(
[32m     69[39m         [33m"[39m[33mUnable to find a usable engine; [39m[33m"[39m
[32m     70[39m         [33m"[39m[33mtried using: [39m[33m'[39m[33mpyarrow[39m[33m'[39m[33m, [39m[33m'[39m[33mfastparquet[39m[33m'[39m[33m.[39m[38;5;130;01m\n[39;00m[33m"[39m
[32m     71[39m         [33m"[39m[33mA suitable version of [39m[33m"[39m
[32m     72[39m         [33m"[39m[33mpyarrow or fastparquet is required for parquet [39m[33m"[39m
[32m     73[39m         [33m"[39m[33msupport.[39m[38;5;130;01m\n[39;00m[33m"[39m
[32m     74[39m         [33m"[39m[33mTrying to import the above resulted in these errors:[39m[33m"[39m
[32m     75[39m         [33mf[39m[33m"[39m[38;5;132;01m{[39;00merror_msgs[38;5;132;01m}[39;00m[33m"[39m
[32m     76[39m     )
[32m     78[39m [38;5;28;01mif[39;00m engine == [33m"[39m[33mpyarrow[39m[33m"[39m:
[32m     79[39m     [38;5;28;01mreturn[39;00m PyArrowImpl()

[31mImportError[39m: Unable to find a usable engine; tried using: 'pyarrow', 'fastparquet'.
A suitable version of pyarrow or fastparquet is required for parquet support.
Trying to import the above resulted in these errors:
 - Missing optional dependency 'pyarrow'. pyarrow is required for parquet support. Use pip or conda to install pyarrow.
 - Missing optional dependency 'fastparquet'. fastparquet is required for parquet support. Use pip or conda to install fastparquet.

